"""Agent that performs lightweight exploratory data analysis."""
from __future__ import annotations

from dataclasses import dataclass
from typing import Any, Dict

import pandas as pd

from .base import Agent, AgentError


@dataclass
class AnalysisReport:
    """Container for the summary generated by the analysis agent."""

    summary: Dict[str, Any]
    recommendations: str

    def to_markdown(self) -> str:
        lines = ["## Dataset Summary", ""]
        for key, value in self.summary.items():
            lines.append(f"- **{key}**: {value}")
        lines.extend(["", "## Recommendations", "", self.recommendations])
        return "\n".join(lines)


class DataAnalysisAgent(Agent):
    """Calculates descriptive statistics and simple insights."""

    name = "data_analysis"

    def run(self, *, dataframe: pd.DataFrame | None = None, **_: Any) -> AnalysisReport:
        if dataframe is None:
            raise AgentError("DataFrame required for analysis.", agent_name=self.name)

        numeric_columns = dataframe.select_dtypes(include="number")
        categorical_columns = dataframe.select_dtypes(exclude="number")

        summary: Dict[str, Any] = {
            "rows": len(dataframe),
            "columns": len(dataframe.columns),
            "numeric_columns": list(numeric_columns.columns),
            "categorical_columns": list(categorical_columns.columns),
        }

        if not numeric_columns.empty:
            summary["numeric_summary"] = numeric_columns.describe().to_dict()
        else:
            summary["numeric_summary"] = "No numeric columns detected."

        recommendations = self._generate_recommendations(numeric_columns, categorical_columns)

        report = AnalysisReport(summary=summary, recommendations=recommendations)
        self.update_context(report=report)
        return report

    def _generate_recommendations(
        self, numeric_columns: pd.DataFrame, categorical_columns: pd.DataFrame
    ) -> str:
        if numeric_columns.empty and categorical_columns.empty:
            return "No data available for generating recommendations."

        recs = []
        if not numeric_columns.empty:
            recs.append("Consider plotting histograms for numeric features to inspect distribution.")
            if numeric_columns.shape[1] > 1:
                recs.append("Scatter plots can highlight relationships between numeric pairs.")

        if not categorical_columns.empty:
            recs.append("Bar charts can show the frequency distribution of categorical features.")

        return " \n".join(recs)
